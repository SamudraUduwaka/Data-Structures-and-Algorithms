#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'lilysHomework' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

int lilysHomework(vector<int> arr) {
    
    vector<pair<int, int>> pair1, pair2;
    int size = arr.size();
    
    for (int i = 0; i < size; i++){
        pair1.push_back({arr[i], i});
    }
    
    for (int i = 0; i < size; i++){
        pair2.push_back({arr[i], i});
    }
     
    //Obtaining the sorted arrays
    sort(pair1.begin(), pair1.end());
    sort(pair2.rbegin(), pair2.rend());
    
    int swaps_pair1 = 0;
    int swaps_pair2 = 0;
    
    //Finding the no of swaps needed in pair array 1 and pair array 2 respectively
    for (int i = 0; i < size; i++){
        if (pair1[i].second != i) {
            swap(pair1[i], pair1[pair1[i].second]);
            swaps_pair1++;
            i--;
        }
    }
    for (int i = 0; i < size; i++){
        if (pair2[i].second != i) {
            swap(pair2[i], pair2[pair2[i].second]);
            swaps_pair2++;
            i--;
        }
    }
    
    //Returning the minimum from those two no of swaps
    return min(swaps_pair1, swaps_pair2);
}

int main()
{
    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split(rtrim(arr_temp_temp));

    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    int result = lilysHomework(arr);

    cout << result << "\n";

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
